#! /usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import json
import livesplit_core
import os
from pprint import pprint, pformat
import string
import sys
import urwid

class InputHandler:
	def __init__(self, timer):
		self.timer = timer

	def out(self):
		raise urwid.ExitMainLoop()

	def __call__(self, key):
		{
			'q': lambda: self.out(),
			'Q': lambda: self.out(),
			'1': lambda: self.timer.split_or_start(),
			'2': lambda: self.timer.skip_split(),
			'3': lambda: self.timer.reset(True),
			'4': lambda: self.timer.switch_to_previous_comparison(),
			'5': lambda: self.timer.toggle_pause_or_start(),
			'6': lambda: self.timer.switch_to_next_comparison(),
			'8': lambda: self.timer.undo_split()
		}.get(key, lambda: None)()

class LoopHandler:
	def __init__(self, timer, layout, settings):
		self.timer = timer
		self.layout = layout
		self.settings = settings

	def renderTitle(self, component, pile):
		game = component['line1'] or ""
		category = component['line2'] or ""
		attempts = "%i" % component['attempts']
		pile.contents.append((urwid.Text(u"{game: ^56}".format(game=game)), ('weight', 1)))
		pile.contents.append((urwid.Text(u"{category: <49} {attempts: >6}".format(category=category,attempts=attempts)), ('weight', 1)))

	def renderSplits(self, component, pile):
		for split in component['splits']:
			pile.contents.append((urwid.Text(u"{name: <36s} {delta: >9s} {time: >9s}".format(name=split['name'], delta=split['delta'], time=split['time'])), ('weight', 1)))

	def renderTimer(self, component, pile):
		time = "{time: >6s}{frac: >3s}".format(time=component['time'],
		                                       frac=component['fraction'])
		pile.contents.append((urwid.Text(u"{time: >56}".format(time=time)), ('weight', 1)))

	def renderPreviousSegment(self, component, pile):
		pile.contents.append((urwid.Text(u"{text: <37s} {time: >18s}".format(text=component['text'], time=component['time'])), ('weight', 1)))

	def __call__(self, loop, data):
		pile = loop.widget.original_widget
		del pile.contents[:]

		layout_state = json.loads(self.layout.state_as_json(self.timer))

		for comp in layout_state['components']:
			for name, component in comp.items():
				{
					'Title': self.renderTitle,
					'Splits': self.renderSplits,
					'Timer': self.renderTimer,
					'PreviousSegment': self.renderPreviousSegment,
				}.get(name, lambda component, pile: None)(component, pile)

		loop.set_alarm_in(0.03, self, data)
		pass

def main():
	# Command Line Arguments
	app_description = "A featureful, customizable timer for speedrunners, in the terminal"
	args_parser = argparse.ArgumentParser(description = app_description)
	args_parser.add_argument("-c", "--config",
	                         dest="config",
	                         metavar="CONFIG",
	                         help="Config file to load",
	                         default=os.path.expanduser("~/.pyvesplit-terminal"))
	args_parser.add_argument(dest="run",
	                         help="Splits run file to load",
	                         metavar="[RUN]",
	                         nargs="?",
	                         default=None)
	args = args_parser.parse_args()

	# Load Run
	run = None
	if args.run != None:
		try:
			runfile = open(args.run, 'rb')
			run = livesplit_core.Run.parse_file(runfile)
		except IOError:
			print("Unable to open: %s" % args.run)
			sys.exit(1)
	else:
		run = livesplit_core.Run.parse(default_run, len(default_run))

	if not run:
		print("Unable to parse: %s" % args.run)
		sys.exit(1)

	# Set up Livesplit Things
	settings = livesplit_core.GeneralLayoutSettings.default()
	timer = livesplit_core.Timer.new(run)

	if not timer:
		print("Unable to parse: %s" % args.run)
		sys.exit(1)

	layout = livesplit_core.Layout.default_layout()
	print(json.dumps(json.loads(layout.state_as_json(timer).decode('utf-8')), indent=2))

	# Start up urwid
	urwid.set_encoding("utf8")
	loop = urwid.MainLoop(urwid.SolidFill(), unhandled_input = InputHandler(timer))
	loop.screen.set_terminal_properties(colors=256)
	loop.widget = urwid.Filler(urwid.Pile([]))
	loop.widget.original_widget.contents.append((urwid.Text(u"ハ！LiveSplit"), ('weight', 1)))

	loopHandler = LoopHandler(timer, layout, settings)
	loopHandler(loop, None)
	loop.run()

default_run = u"""<?xml version="1.0" encoding="UTF-8"?>
<Run version="1.6.0">
  <GameIcon />
  <GameName>Pyvesplit</GameName>
  <CategoryName>Terminal</CategoryName>
  <Metadata>
    <Run id="" />
    <Platform usesEmulator="False">
    </Platform>
    <Region>
    </Region>
    <Variables />
  </Metadata>
  <Offset>00:00:00</Offset>
  <AttemptCount>0</AttemptCount>
  <AttemptHistory>
  </AttemptHistory>
  <Segments>
    <Segment>
      <Name>Done!</Name>
      <Icon></Icon>
      <SplitTimes>
      </SplitTimes>
      <BestSegmentTime>
      </BestSegmentTime>
      <SegmentHistory>
      </SegmentHistory>
    </Segment>
  </Segments>
  <AutoSplitterSettings />
</Run>
""".encode('utf8')

main()
