#! /usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import json
import livesplit_core
import os
from pprint import pprint, pformat
from pyfiglet import figlet_format
import string
import sys
import urwid
from x256 import x256

class YesNoBox(urwid.Filler):
	def __init__(self, header_msg, yes_msg = u"Yes", no_msg = u"No"):
		self.state = None
		header = urwid.Text(header_msg)
		yes = urwid.Button(yes_msg, self.input, True)
		no = urwid.Button(no_msg, self.input, False)
		pile = urwid.Pile([header, yes, no])
		urwid.Filler.__init__(self, pile)

	def get_state(self):
		return self.state

	def input(self, button, result):
		self.state = result
		raise urwid.ExitMainLoop()

def getAttrSpecForColors(colors, fg, bg):
	# 16 color palette downconversion by Ashen-Shugar ( http://rhostmush.com )
	# Used with permission
	convert256to16 = [
		"x",  "r",  "g",  "y",  "b",  "m",  "c",  "w",
		"xh", "rh", "gh", "yh", "bh", "mh", "ch", "wh",
		"x",  "b",  "b",  "b",  "bh", "bh", "g",  "c",
		"b",  "bh", "bh", "bh", "gh", "g",  "c",  "bh",
		"bh", "bh", "gh", "gh", "ch", "ch", "bh", "bh",
		"gh", "gh", "gh", "ch", "ch", "ch", "gh", "gh",
		"gh", "ch", "ch", "ch", "r",  "m",  "m",  "mh",
		"bh", "bh", "g",  "g",  "c",  "bh", "bh", "bh",
		"g",  "g",  "g",  "c",  "c",  "bh", "gh", "g",
		"g",  "c",  "ch", "ch", "gh", "gh", "gh", "ch",
		"ch", "ch", "gh", "gh", "gh", "gh", "ch", "ch",
		"r",  "r",  "m",  "m",  "mh", "mh", "r",  "r",
		"m",  "m",  "mh", "mh", "y",  "y",  "g",  "c",
		"bh", "bh", "g",  "g",  "g",  "c",  "ch", "ch",
		"gh", "gh", "gh", "gh", "ch", "ch", "gh", "gh",
		"gh", "gh", "wh", "wh", "r",  "m",  "m",  "mh",
		"mh", "mh", "rh", "rh", "rh", "mh", "mh", "mh",
		"y",  "y",  "mh", "mh", "mh", "mh", "y",  "y",
		"y",  "mh", "mh", "mh", "yh", "yh", "gh", "wh",
		"wh", "wh", "yh", "yh", "yh", "yh", "wh", "wh",
		"r",  "rh", "mh", "mh", "mh", "mh", "rh", "rh",
		"rh", "mh", "mh", "mh", "y",  "y",  "y",  "mh",
		"mh", "mh", "y",  "y",  "yh", "mh", "mh", "mh",
		"y",  "y",  "yh", "wh", "wh", "wh", "yh", "yh",
		"yh", "wh", "wh", "wh", "rh", "rh", "rh", "mh",
		"mh", "mh", "rh", "rh", "rh", "mh", "mh", "mh",
		"rh", "rh", "mh", "mh", "mh", "mh", "yh", "yh",
		"wh", "wh", "wh", "wh", "yh", "yh", "yh", "wh",
		"wh", "wh", "yh", "yh", "yh", "yh", "wh", "wh",
		"x",  "x",  "xh", "xh", "xh", "xh", "xh", "xh",
		"xh", "w",  "w",  "w",  "w",  "w",  "w",  "w",
		"wh", "wh", "wh", "wh", "wh", "wh", "wh", "wh"
	]

	convertRhostToUrwid = {
		"x":  "black",
		"r":  "dark red",
		"g":  "dark green",
		"y":  "brown",
		"b":  "dark blue",
		"m":  "dark magenta",
		"c":  "dark cyan",
		"w":  "light gray",
		"xh": "dark gray",
		"rh": "light red",
		"gh": "light green",
		"yh": "yellow",
		"bh": "light blue",
		"mh": "light magenta",
		"ch": "light cyan",
		"wh": "white"
	}

	if colors == '16':
		fg = convertRhostToUrwid[convert256to16[int(fg.right(3))]]
		bg = convertRhostToUrwid[convert256to16[int(bg.right(3))]]

	return urwid.AttrSpec(fg, bg, int(colors))

class InputHandler:
	def __init__(self, timer):
		self.timer = timer

	def out(self):
		raise urwid.ExitMainLoop()

	def __call__(self, key):
		{
			'q': lambda: self.out(),
			'Q': lambda: self.out(),
			'1': lambda: self.timer.split_or_start(),
			'2': lambda: self.timer.skip_split(),
			'3': lambda: self.timer.reset(True),
			'4': lambda: self.timer.switch_to_previous_comparison(),
			'5': lambda: self.timer.toggle_pause_or_start(),
			'6': lambda: self.timer.switch_to_next_comparison(),
			'8': lambda: self.timer.undo_split()
		}.get(key, lambda: None)()

class LoopHandler:
	def __init__(self, config, timer, layout):
		self.timer = timer
		self.layout = layout
		self.config = config

	def getColor(self, visual):
		r = visual[0] * 255 * visual[3]
		g = visual[1] * 255 * visual[3]
		b = visual[2] * 255 * visual[3]
		return "h{}".format(x256.from_rgb(r, g, b))

	def getBackgroundColor(self, attr):
		if attr == "Transparent":
			return self.getBackgroundColor(self.state['background'])
		elif 'Plain' in attr:
			visual = attr['Plain']
		elif 'Vertical' in attr:
			visual = attr['Vertical'][0]
		else:
			return self.getBackgroundColor(self.state['background'])
		return self.getColor(visual)

	def appendTextForAttributes(self, pile, text, foreground, background, layout=('weight', 1)):
		f = self.getColor(foreground)
		b = self.getBackgroundColor(background)
		aspec = getAttrSpecForColors(self.config['palette'], f, b)
		pile.contents.append(( urwid.Text((aspec, text)), layout))

	def getSettingsForComponent(self, component_name):
		settings = json.loads(self.layout.settings_as_json())
		for component in settings['components']:
			if component_name in component:
				return component[component_name]
		return {}

	def getSemanticColor(self, semantic):
		settings = json.loads(self.layout.settings_as_json())
		return {
			'Default': settings['general']['text_color'],
			'AheadGainingTime': settings['general']['ahead_gaining_time_color'],
			'AheadLosingTime': settings['general']['ahead_losing_time_color'],
			'BehindLosingTime': settings['general']['behind_losing_time_color'],
			'BehindGainingTime': settings['general']['behind_gaining_time_color'],
			'BestSegment': settings['general']['best_segment_color'],
			'NotRunning': settings['general']['not_running_color'],
			'Paused': settings['general']['paused_color'],
			'PersonalBest': settings['general']['personal_best_color']
		}.get(semantic, settings['general']['text_color'])

	def renderTitle(self, component, pile):
		component_settings = self.getSettingsForComponent('Title')

		game = component['line1'] or ""
		if component_settings.get('center_text', True):
			game_formatter = game.center
		else:
			game_formatter = game.ljust

		if component_settings.get('show_attempt_count', True):
			attempts = "%i" % component['attempts']
			if component_settings.get('show_finished_runs_count', False):
				attempts = "%i/" % (component['finished_runs'] or 0) + attempts
		else:
			attempts = ""

		category = component['line2'] or ""

		text = game_formatter(self.screen_size[0] - 1)
		fg = self.state['text_color']
		bg = component['background']
		self.appendTextForAttributes(pile, text, fg, bg)

		if len(category) or len(attempts):
			text = category.ljust(self.screen_size[0] - 13) + \
			       attempts.rjust(12)
			self.appendTextForAttributes(pile, text, fg, bg)

	def renderSplits(self, component, pile):
		component_settings = self.getSettingsForComponent('Splits')

		visual_split_count = component_settings.get("visual_split_count", 50)
		split_preview_count = component_settings.get("split_preview_count", 1)
		separator_last_split = component_settings.get("separator_last_split", True)
		always_show_last_split = component_settings.get("always_show_last_split", True)

		cur = 0
		last = len(component['splits']) - 1
		start = 0
		end = last

		for split in component['splits']:
			if split['is_current_split']:
				cur = split['index']

		to_crop = end - visual_split_count + 1
		if to_crop > 0:
			end = cur + split_preview_count
			start = last - visual_split_count

			if end > last:
				start -= end - last
				end = last

			if last > end and always_show_last_split:
				start += 1

			if start < 0:
				start = 0

		range = xrange(start, end + 1)

		for i in range:
			split = component['splits'][i]

			if split['is_current_split']:
				bg = component['current_split_gradient']
			elif 'background' in component:
				bg = component['background']
			else:
				bg = self.state['background']

			if i == last and separator_last_split:
				text = ''.ljust(self.screen_size[0] - 1, '-')
				fg = self.getSemanticColor('Default')
				self.appendTextForAttributes(pile, text, fg, bg)

			if i == start:
				fg = self.getSemanticColor('Default')
				text = 'Segment'.ljust(self.screen_size[0] - 21) + ' ' + \
				       'Delta'.rjust(9) + ' ' + \
				       'Time'.rjust(9)
				self.appendTextForAttributes(pile, text, fg, bg)

			fg = self.getSemanticColor(split['semantic_color'])
			text = split['name'].ljust(self.screen_size[0] - 21) + ' ' + \
			       split['delta'].rjust(9) + ' ' + \
			       split['time'].rjust(9)
			self.appendTextForAttributes(pile, text, fg, bg)

	def formatFiglet(self, figlet, formatter):
		lines = figlet.split("\n")
		for i in xrange(0, len(lines)):
			lines[i] = formatter(lines[i])
		return "\n".join(lines)

	def renderTimer(self, component, pile):
		time = "{time: >6s}{frac: >3s}".format(time=component['time'],
		                                       frac=component['fraction'])
		formatter = lambda line: line.rjust(self.screen_size[0] - 1)
		figlet = figlet_format(time.strip(), font=self.config['timer_font'])
		text = self.formatFiglet(figlet, formatter)
		fg = self.getSemanticColor(component['semantic_color'])
		bg = component['background']
		self.appendTextForAttributes(pile, text, fg, bg)

	def renderPreviousSegment(self, component, pile):
		text = component['text'].ljust(self.screen_size[0] - 20) + ' ' + \
		       component['time'].rjust(18)
		fg = component['visual_color']
		bg = self.state['background']
		self.appendTextForAttributes(pile, text, fg, bg)

	def renderTotalPlaytime(self, component, pile):
		text = component['text'].ljust(self.screen_size[0] - 20) + ' ' + \
		       component['time'].rjust(18)
		fg = self.getSemanticColor('Default')
		bg = component['background']
		self.appendTextForAttributes(pile, text, fg, bg)

	def __call__(self, loop, data):
		pile = loop.widget.original_widget
		del pile.contents[:]

		self.state = json.loads(self.layout.state_as_json(self.timer))
		self.screen_size = loop.screen.get_cols_rows()

		for comp in self.state['components']:
			for name, component in comp.items():
				{
					'PreviousSegment': self.renderPreviousSegment,
					'Splits': self.renderSplits,
					'Timer': self.renderTimer,
					'Title': self.renderTitle,
					'TotalPlaytime': self.renderTotalPlaytime,
				}.get(name, lambda component, pile: None)(component, pile)

		loop.set_alarm_in(0.03, self, data)
		pass

def main():
	# Command Line Arguments
	app_description = "A featureful, customizable timer for speed runners, in the terminal"
	args_parser = argparse.ArgumentParser(description = app_description)
	args_parser.add_argument("-c", "--config",
	                         dest="config",
	                         metavar="CONFIG",
	                         help="Config file to load",
	                         default=os.path.expanduser("~/.pyvesplit-terminal"))
	args_parser.add_argument("-p", "--palette",
	                         dest="palette",
	                         metavar="NUM",
	                         help="Number of terminal colors to use",
	                         choices=['16', '256'])
	args_parser.add_argument(dest="run",
	                         help="Splits run file to load",
	                         metavar="[RUN]",
	                         nargs="?",
	                         default=None)
	args = args_parser.parse_args()

	# Load Run
	run = None
	if args.run != None:
		try:
			runfile = open(args.run, 'rb')
			run = livesplit_core.Run.parse_file(runfile)
		except IOError:
			print("Unable to open: %s" % args.run)
			sys.exit(1)
	else:
		run = livesplit_core.Run.parse(default_run, len(default_run))

	if not run:
		print("Unable to parse: %s" % args.run)
		sys.exit(1)
	
	# Set up Timer
	timer = livesplit_core.Timer.new(run)

	if not timer:
		print("Unable to parse: %s" % args.run)
		sys.exit(1)

	# Load Configuration
	config = None
	if args.config:
		try:
			configfile = open(args.config, 'r')
			config = json.loads(configfile.read())
		except IOError:
			config = None

	if not config or not isinstance(config, dict):
		config = json.loads("{}")

	config.setdefault('layout', False)
	config.setdefault('palette', '16')
	config.setdefault('timer_font', '3x5')

	# Set up Layout
	if config['layout']:
		layout = livesplit_core.Layout.parse_json(json.dumps(config['layout']).encode('utf8'))
	else:
		layout = livesplit_core.Layout.default_layout()

	# Start up urwid
	urwid.set_encoding("utf8")
	palette = args.palette or config['palette'] or "16"
	loop = urwid.MainLoop(widget = urwid.SolidFill(),
	                      unhandled_input = InputHandler(timer))
	loop.screen.set_terminal_properties(colors=int(palette))
	loop.widget = urwid.Filler(urwid.Pile([]))

	loopHandler = LoopHandler(config, timer, layout)
	loopHandler(loop, None)
	loop.run()

	# Save config
	if args.config:
		config['layout'] = json.loads(layout.settings_as_json().decode('utf8'))
		configfile = open(args.config, 'w')
		configfile.write(json.dumps(config, sort_keys=True, indent=4))

	# Ask to save run
	if args.run:
		dialog = YesNoBox(header_msg = u"Save run '{}'?".format(args.run))
		loop = urwid.MainLoop(widget = dialog)
		loop.run()

		if dialog.get_state():
			run_xml = timer.get_run().save_as_lss().decode('utf8')
			configfile = open(args.run, 'w')
			configfile.write(run_xml)

default_run = u"""<?xml version="1.0" encoding="UTF-8"?>
<Run version="1.6.0">
  <GameIcon />
  <GameName>Pyvesplit</GameName>
  <CategoryName>Terminal</CategoryName>
  <Metadata>
    <Run id="" />
    <Platform usesEmulator="False">
    </Platform>
    <Region>
    </Region>
    <Variables />
  </Metadata>
  <Offset>00:00:00</Offset>
  <AttemptCount>0</AttemptCount>
  <AttemptHistory>
  </AttemptHistory>
  <Segments>
    <Segment>
      <Name>Done!</Name>
      <Icon></Icon>
      <SplitTimes>
      </SplitTimes>
      <BestSegmentTime>
      </BestSegmentTime>
      <SegmentHistory>
      </SegmentHistory>
    </Segment>
  </Segments>
  <AutoSplitterSettings />
</Run>
""".encode('utf8')

main()
