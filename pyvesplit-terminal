#! /usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import livesplit_core
import os
from pprint import pprint
import string
import sys
import urwid

class InputHandler:
	def __init__(self, timer):
		self.timer = timer

	def out(self):
		raise urwid.ExitMainLoop()

	def __call__(self, key):
		{
			'q': lambda: self.out(),
			'Q': lambda: self.out(),
			'1': lambda: self.timer.split_or_start(),
			'2': lambda: self.timer.skip_split(),
			'3': lambda: self.timer.reset(true),
			'4': lambda: self.timer.switch_to_previous_comparison(),
			'5': lambda: self.timer.toggle_pause_or_start(),
			'6': lambda: self.timer.switch_to_next_comparison(),
			'8': lambda: self.timer.undo_split()
		}.get(key, lambda: None)()

class LoopHandler:
	def __init__(self, timer, layout, settings):
		self.timer = timer
		self.layout = layout
		self.settings = settings

	def __call__(self, loop, data):
		pile = loop.widget.original_widget
		del pile.contents[:]

		splits_state = self.layout['splits'].state(self.timer, self.settings)
		title_state = self.layout['title'].state(self.timer)
		game = title_state.line1() or ""
		category = title_state.line2() or ""
		attempts = "%i"  % title_state.attempts()

		timer_state = self.layout['timer'].state(self.timer, self.settings)
		time = "%s%s" % (timer_state.time(), timer_state.fraction())

		loop.widget.original_widget.contents.append((urwid.Text("{game:^40}".format(game=game)), ('weight', 1)))
		loop.widget.original_widget.contents.append((urwid.Text("{category:<34} {attempts:>5}".format(category=category,attempts=attempts)), ('weight', 1)))

		for i in range(0, splits_state.len()):
			sname = splits_state.name(i)
			sdelta = splits_state.delta(i)
			stime = splits_state.time(i)
			loop.widget.original_widget.contents.append((urwid.Text("{name:<20} {delta:>9} {time:>9}".format(name=sname, delta=sdelta, time=stime)), ('weight', 1)))
			pass

		loop.widget.original_widget.contents.append((urwid.Text("{time:>40}".format(time=time)), ('weight', 1)))

		loop.set_alarm_in(0.03, self, data)
		pass

def main():
	# Command Line Arguments
	app_description = "A featureful, customizable timer for speedrunners, in the terminal"
	args_parser = argparse.ArgumentParser(description = app_description)
	args_parser.add_argument("-c", "--config",
	                         dest="config",
	                         metavar="CONFIG",
	                         help="Config file to load",
	                         default=os.path.expanduser("~/.pyvesplit-terminal"))
	args_parser.add_argument(dest="run",
	                         help="Splits run file to load",
	                         metavar="[RUN]",
	                         nargs="?",
	                         default=None)
	args = args_parser.parse_args()

	# Load Run
	run = livesplit_core.Run.new()
	if args.run:
		try:
			runfile = open(args.run, 'r')
			run = livesplit_core.Run.parse_file(runfile)
		except IOError:
			print "Unable to open: %s" % args.run
			sys.exit(1)

	# Set up Livesplit Things
	settings = livesplit_core.GeneralLayoutSettings.default()
	timer = livesplit_core.Timer.new(run)
	layout = {
		'timer': livesplit_core.TimerComponent.new(),
		'splits': livesplit_core.SplitsComponent.new(),
		'title': livesplit_core.TitleComponent.new(),
		'previous': livesplit_core.PreviousSegmentComponent.new(),
		'sob': livesplit_core.SumOfBestComponent.new(),
		'possible': livesplit_core.PossibleTimeSaveComponent.new()
	}

	# Start up urwid
	loop = urwid.MainLoop(urwid.SolidFill(), unhandled_input = InputHandler(timer))
	loop.screen.set_terminal_properties(colors=256)
	loop.widget = urwid.Filler(urwid.Pile([]))
	loop.widget.original_widget.contents.append((urwid.Text(u"ハ！LiveSplit"), ('weight', 1)))

	loopHandler = LoopHandler(timer, layout, settings)
	loopHandler(loop, None)
	loop.run()

main()
